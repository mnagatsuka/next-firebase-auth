get:
  tags:
    - comments
  summary: Get Post Comments
  description: |
    Initiates retrieval of comments for a specific blog post.
    
    **Response Pattern:**
    - HTTP Response: Immediate acknowledgment with comment count
    - WebSocket Delivery: Full comments data delivered via API Gateway WebSocket
    
    **WebSocket Connection:**
    - Development: `ws://localhost:4566` (LocalStack API Gateway)
    - Production: `wss://your-api-gateway-id.execute-api.us-east-1.amazonaws.com/dev`
    
    **WebSocket Message Format:**
    ```json
    {
      "type": "comments_list",
      "data": {
        "post_id": "string",
        "comments": [...],
        "count": 5
      },
      "timestamp": "2024-01-01T00:00:00Z"
    }
    ```
    
    Comments are returned in chronological order (oldest first).
    This endpoint is public and does not require authentication.
  operationId: getPostComments
  security: [] # Public endpoint - no authentication required
  parameters:
    - $ref: "../components/parameters/post-id.yml"
    - name: limit
      in: query
      description: Maximum number of comments to return via WebSocket
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 50
  responses:
    "200":
      description: |
        Comments request acknowledged successfully. 
        
        The actual comments data will be delivered via API Gateway WebSocket 
        to all connected clients.
      content:
        application/json:
          schema:
            $ref: "../openapi.yml#/components/schemas/CommentsAcknowledgmentResponse"
          examples:
            default:
              $ref: "../components/examples/comments-acknowledgment-response.yml"
    "404":
      $ref: "../components/responses/not-found.yml"
    "500":
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "../openapi.yml#/components/schemas/Error"

post:
  tags:
    - comments
  summary: Create Comment
  description: |
    Creates a new comment on a specific blog post. Requires authentication.
    
    The userId will be automatically set based on the authenticated user's Firebase UID.
    Comments are moderated and may not appear immediately.
  operationId: createComment
  security:
    - firebaseAuth: []
  parameters:
    - $ref: "../components/parameters/post-id.yml"
  requestBody:
    required: true
    description: Comment data
    content:
      application/json:
        schema:
          $ref: "../openapi.yml#/components/schemas/CreateCommentRequest"
        examples:
          default:
            $ref: "../components/examples/create-comment-request.yml"
  responses:
    "201":
      description: Comment created successfully
      headers:
        Location:
          description: URL of the created comment
          schema:
            type: string
            format: uri
            example: "/posts/post-123/comments/comment-456"
      content:
        application/json:
          schema:
            $ref: "../openapi.yml#/components/schemas/Comment"
          examples:
            default:
              $ref: "../components/examples/comment.yml"
    "400":
      $ref: "../components/responses/bad-request.yml"
    "401":
      $ref: "../components/responses/unauthorized.yml"
    "404":
      $ref: "../components/responses/not-found.yml"
    "422":
      description: Validation error
      content:
        application/json:
          schema:
            $ref: "../openapi.yml#/components/schemas/Error"
    "500":
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "../openapi.yml#/components/schemas/Error"
