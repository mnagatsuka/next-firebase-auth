AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Full-Stack Blog Application Infrastructure
  - FastAPI Backend with Lambda Web Adapter
  - WebSocket API for real-time comments
  - DynamoDB for data persistence
  - API Gateway v2 for HTTP and WebSocket protocols

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues: [development, staging, production]
    Description: Environment name for deployment
  
  AllowedOrigins:
    Type: String
    Default: http://localhost:3000
    Description: Comma-separated CORS origins (e.g., http://localhost:3000,https://example.com)
  
  FirebaseProjectId:
    Type: String
    Default: demo-project
    Description: Firebase project ID for authentication
  
  # Lambda Web Adapter layer version (x86_64). Used to compute the ARN per region.
  LambdaAdapterLayerVersion:
    Type: String
    Default: '25'
    Description: Version number of AWS Lambda Web Adapter layer (x86_64)

Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Runtime: python3.13
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        LOG_LEVEL: !If [IsProd, 'INFO', 'DEBUG']
        FIREBASE_PROJECT_ID: !Ref FirebaseProjectId

Conditions:
  IsProd: !Equals [!Ref Environment, 'production']
  IsStaging: !Equals [!Ref Environment, 'staging']


Resources:
  # =============================================================================
  # DATA LAYER - DynamoDB Tables
  # =============================================================================
  # Note: PITR is disabled on all tables for cost optimization
  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-posts'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: BlogAPI

  CommentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-comments'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: BlogAPI

  FavoritesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-favorites'
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: post_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: post_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: BlogAPI

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-websocket-connections'
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: BlogAPI

  # =============================================================================
  # API LAYER - HTTP API Gateway v2
  # =============================================================================
  BlogHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${AWS::StackName}-http-api'
      Description: Blog HTTP API Gateway
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - Authorization
          - Content-Type
        AllowMethods:
          - GET
          - POST
          - PUT
          - PATCH
          - DELETE
          - OPTIONS
        AllowCredentials: false

  # (Removed) REST proxy via HTTP API for BlogAPIFunction

  # HTTP API Stage
  BlogHttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref BlogHttpApi
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt HttpApiLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'

  # =============================================================================
  # WEBSOCKET LAYER - WebSocket API Gateway v2
  # =============================================================================
  WebSocketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${AWS::StackName}-websocket-api'
      Description: Blog WebSocket API
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  # WebSocket Integrations
  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations'

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations'

  WebSocketDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDefaultFunction.Arn}/invocations'

  # WebSocket Routes
  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $connect
      Target: !Sub 'integrations/${WebSocketConnectIntegration}'

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $disconnect
      Target: !Sub 'integrations/${WebSocketDisconnectIntegration}'

  WebSocketDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $default
      Target: !Sub 'integrations/${WebSocketDefaultIntegration}'

  # WebSocket Stage
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketAPI
      StageName: !Ref Environment
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt WebSocketApiLogGroup.Arn
        Format: '{"requestId":"$context.requestId","eventType":"$context.eventType","routeKey":"$context.routeKey","status":"$context.status","connectionId":"$context.connectionId","requestTime":"$context.requestTime"}'

  # =============================================================================
  # COMPUTE LAYER - Lambda Functions
  # =============================================================================
  
  # FastAPI Backend Function (Python + Lambda Web Adapter)
  BlogAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-api'
      CodeUri: ../../backend
      Handler: placeholder
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:753240598075:layer:LambdaAdapterLayerX86:${LambdaAdapterLayerVersion}
      Environment:
        Variables:
          APP_ENVIRONMENT: !Ref Environment
          AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
          PORT: 8000
          REPOSITORY_PROVIDER: dynamodb
          APP_DYNAMODB_TABLE_POSTS: !Ref PostsTable
          APP_DYNAMODB_TABLE_COMMENTS: !Ref CommentsTable
          APP_DYNAMODB_TABLE_FAVORITES: !Ref FavoritesTable
          AWS_REGION: !Ref AWS::Region
          AWS_ENDPOINT_URL: ""
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CommentsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref FavoritesTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  # WebSocket Handler Functions (Node.js 20.x with AWS SDK v3)
  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-websocket-connect'
      CodeUri: websocket-handlers/
      Handler: connect.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          DYNAMODB_CONNECTIONS_TABLE: !Ref WebSocketConnectionsTable
          AWS_REGION: !Ref AWS::Region
          LOG_LEVEL: !If [IsProd, 'INFO', 'DEBUG']
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
      Metadata:
        BuildMethod: esbuild
        BuildProperties:
          Minify: true
          Target: es2022
          Sourcemap: true
          EntryPoints:
            - connect.ts

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-websocket-disconnect'
      CodeUri: websocket-handlers/
      Handler: disconnect.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          DYNAMODB_CONNECTIONS_TABLE: !Ref WebSocketConnectionsTable
          AWS_REGION: !Ref AWS::Region
          LOG_LEVEL: !If [IsProd, 'INFO', 'DEBUG']
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
      Metadata:
        BuildMethod: esbuild
        BuildProperties:
          Minify: true
          Target: es2022
          Sourcemap: true
          EntryPoints:
            - disconnect.ts

  WebSocketDefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-websocket-default'
      CodeUri: websocket-handlers/
      Handler: default.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          WEBSOCKET_API_ENDPOINT: !Sub 'https://${WebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
          AWS_REGION: !Ref AWS::Region
          LOG_LEVEL: !If [IsProd, 'INFO', 'DEBUG']
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/${Environment}/*/@connections/*'
      Metadata:
        BuildMethod: esbuild
        BuildProperties:
          Minify: true
          Target: es2022
          Sourcemap: true
          EntryPoints:
            - default.ts

  # WebSocket Broadcast Function (HTTP API endpoint)
  WebSocketBroadcastFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-websocket-broadcast'
      CodeUri: websocket-handlers/
      Handler: broadcast.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          DYNAMODB_CONNECTIONS_TABLE: !Ref WebSocketConnectionsTable
          WEBSOCKET_API_ENDPOINT: !Sub 'https://${WebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
          AWS_REGION: !Ref AWS::Region
          LOG_LEVEL: !If [IsProd, 'INFO', 'DEBUG']
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/${Environment}/*/@connections/*'
      Metadata:
        BuildMethod: esbuild
        BuildProperties:
          Minify: true
          Target: es2022
          Sourcemap: true
          EntryPoints:
            - broadcast.ts

  # HTTP API Route for WebSocket broadcasting
  BroadcastHttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BlogHttpApi
      RouteKey: 'POST /broadcast/comments'
      Target: !Sub 'integrations/${BroadcastHttpApiIntegration}'

  # HTTP API Integration for broadcast
  BroadcastHttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BlogHttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketBroadcastFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  # =============================================================================
  # SECURITY LAYER - Lambda Permissions
  # =============================================================================
  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/*'

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/*'

  WebSocketDefaultPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDefaultFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/*'

  # (Removed) HTTP API permission for BlogAPIFunction (REST proxy)

  # =============================================================================
  # FUNCTION URL - Lambda Web Adapter REST Entry
  # =============================================================================
  BlogFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref BlogAPIFunction
      AuthType: NONE
      Cors:
        AllowOrigins:
          - "*"
        AllowMethods:
          - GET
          - POST
          - PUT
          - PATCH
          - DELETE
          - OPTIONS
        AllowHeaders:
          - Authorization
          - Content-Type
        AllowCredentials: false

  BlogFunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BlogAPIFunction
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

  BroadcastHttpApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketBroadcastFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BlogHttpApi}/*/*'

  # =============================================================================
  # MONITORING LAYER - CloudWatch Log Groups
  # =============================================================================
  BlogAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-api'
      RetentionInDays: !If [IsProd, 30, 7]

  WebSocketConnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-websocket-connect'
      RetentionInDays: !If [IsProd, 30, 7]

  WebSocketDisconnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-websocket-disconnect'
      RetentionInDays: !If [IsProd, 30, 7]

  WebSocketDefaultLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-websocket-default'
      RetentionInDays: !If [IsProd, 30, 7]

  WebSocketBroadcastLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-websocket-broadcast'
      RetentionInDays: !If [IsProd, 30, 7]

  # API Gateway Log Groups
  HttpApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AWS::StackName}-http-api'
      RetentionInDays: !If [IsProd, 30, 7]

  WebSocketApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AWS::StackName}-websocket-api'
      RetentionInDays: !If [IsProd, 30, 7]

Outputs:
  # =============================================================================
  # STACK OUTPUTS - URLs and Resource References
  # =============================================================================
  
  # API Endpoints
  FunctionUrlEndpoint:
    Description: Lambda Function URL endpoint
    Value: !GetAtt BlogFunctionUrl.FunctionUrl
    Export:
      Name: !Sub '${AWS::StackName}-FunctionUrlEndpoint'
  
  WebSocketURL:
    Description: WebSocket API URL
    Value: !Sub 'wss://${WebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-WebSocketURL'

  WebSocketMgmtHttpsUrl:
    Description: WebSocket Management API HTTPS URL
    Value: !Sub 'https://${WebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-WebSocketMgmtHttpsUrl'

  BroadcastApiUrl:
    Description: WebSocket Broadcast API URL (via HTTP API)
    Value: !Sub 'https://${BlogHttpApi}.execute-api.${AWS::Region}.amazonaws.com/broadcast/comments'
    Export:
      Name: !Sub '${AWS::StackName}-BroadcastApiUrl'
  
  # (Removed) HealthCheckUrl output for HTTP API
  
  # Database Resources
  PostsTable:
    Description: DynamoDB Posts table name
    Value: !Ref PostsTable
    Export:
      Name: !Sub '${AWS::StackName}-PostsTable'

  CommentsTable:
    Description: DynamoDB Comments table name
    Value: !Ref CommentsTable
    Export:
      Name: !Sub '${AWS::StackName}-CommentsTable'

  FavoritesTable:
    Description: DynamoDB Favorites table name
    Value: !Ref FavoritesTable
    Export:
      Name: !Sub '${AWS::StackName}-FavoritesTable'

  WebSocketConnectionsTable:
    Description: DynamoDB WebSocket Connections table name
    Value: !Ref WebSocketConnectionsTable
    Export:
      Name: !Sub '${AWS::StackName}-WebSocketConnectionsTable'
  
  # Lambda Functions
  FastAPIFunctionName:
    Description: FastAPI Lambda function name
    Value: !Ref BlogAPIFunction
    Export:
      Name: !Sub '${AWS::StackName}-FastAPIFunctionName'
