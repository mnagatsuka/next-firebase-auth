# coding: utf-8

"""
    Blog Post API

    A comprehensive API for managing blog posts and comments with Firebase Authentication integration.  This API supports: - Blog post creation, retrieval, and management - Comment management on blog posts - User authentication via Firebase Auth - Pagination and filtering capabilities  ## Authentication  All endpoints require Firebase Authentication unless otherwise specified. Include the Firebase ID token in the Authorization header:  ``` Authorization: Bearer <firebase-id-token> ``` 

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@example.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BlogPost(BaseModel):
    """
    BlogPost
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the blog post")
    title: StrictStr = Field(description="Title of the blog post")
    content: StrictStr = Field(description="Full content of the blog post in markdown format")
    excerpt: StrictStr = Field(description="Short summary or excerpt of the blog post")
    author: StrictStr = Field(description="Author of the blog post")
    published_at: datetime = Field(description="Timestamp when the blog post was published", alias="publishedAt")
    status: StrictStr = Field(description="Current status of the blog post")
    __properties: ClassVar[List[str]] = ["id", "title", "content", "excerpt", "author", "publishedAt", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('draft', 'published',):
            raise ValueError("must be one of enum values ('draft', 'published')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BlogPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BlogPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "content": obj.get("content"),
            "excerpt": obj.get("excerpt"),
            "author": obj.get("author"),
            "publishedAt": obj.get("publishedAt"),
            "status": obj.get("status")
        })
        return _obj


