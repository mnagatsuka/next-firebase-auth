AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FastAPI Backend with Lambda Web Adapter - Clean Architecture Blog API

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name for deployment
  
  FirebaseProjectId:
    Type: String
    Default: demo-project
    Description: Firebase project ID for authentication

Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Runtime: python3.13
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        LOG_LEVEL: !If [IsProd, 'INFO', 'DEBUG']
        AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
        PORT: 8000
        REPOSITORY_PROVIDER: dynamodb
        FIREBASE_PROJECT_ID: !Ref FirebaseProjectId

Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']
  IsStaging: !Equals [!Ref Environment, 'staging']

Resources:
  # Lambda Web Adapter Layer
  LambdaWebAdapterLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-lambda-web-adapter'
      Description: Lambda Web Adapter for FastAPI
      ContentUri: https://github.com/awslabs/aws-lambda-web-adapter/releases/latest/download/lambda-adapter.zip
      CompatibleRuntimes:
        - python3.13
      CompatibleArchitectures:
        - x86_64

  # FastAPI Function
  BlogAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-api'
      CodeUri: ../..
      Handler: deploy/scripts/run.sh
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Layers:
        - !Ref LambdaWebAdapterLayer
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref BlogPostsTable
          AWS_REGION: !Ref AWS::Region
          AWS_ENDPOINT_URL: ""
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: ANY
            ApiId: !Ref BlogHttpApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BlogPostsTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  # HTTP API Gateway
  BlogHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: Blog API Gateway
      CorsConfiguration:
        AllowOrigins:
          - !If [IsProd, 'https://yourdomain.com', '*']
        AllowHeaders:
          - Content-Type
          - Authorization
          - X-Amz-Date
          - X-Api-Key
          - X-Amz-Security-Token
        AllowMethods:
          - GET
          - POST
          - PUT
          - PATCH
          - DELETE
          - OPTIONS
        AllowCredentials: true

  # DynamoDB Table - Single table design
  BlogPostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-blog-posts'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi1pk
          AttributeType: S
        - AttributeName: gsi1sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: gsi1pk
              KeyType: HASH
            - AttributeName: gsi1sk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: BlogAPI

  # CloudWatch Log Group
  BlogAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-api'
      RetentionInDays: !If [IsProd, 30, 7]

Outputs:
  ApiUrl:
    Description: Blog API Gateway URL
    Value: !Sub 'https://${BlogHttpApi}.execute-api.${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'
  
  HealthCheckUrl:
    Description: Health check endpoint
    Value: !Sub 'https://${BlogHttpApi}.execute-api.${AWS::Region}.amazonaws.com/api/health'
    Export:
      Name: !Sub '${AWS::StackName}-HealthCheckUrl'
  
  DynamoDBTable:
    Description: DynamoDB table name
    Value: !Ref BlogPostsTable
    Export:
      Name: !Sub '${AWS::StackName}-TableName'
  
  FunctionName:
    Description: Lambda function name
    Value: !Ref BlogAPIFunction
    Export:
      Name: !Sub '${AWS::StackName}-FunctionName'