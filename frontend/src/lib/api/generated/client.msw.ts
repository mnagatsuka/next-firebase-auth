/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Blog Post API
 * A comprehensive API for managing blog posts and comments with Firebase Authentication integration.

This API supports:
- Blog post creation, retrieval, and management
- Comment management on blog posts
- User authentication via Firebase Auth
- Pagination and filtering capabilities

## Authentication

All endpoints require Firebase Authentication unless otherwise specified.
Include the Firebase ID token in the Authorization header:

```
Authorization: Bearer <firebase-id-token>
```

 * OpenAPI spec version: 1.0.0
 */
import {
  HttpResponse,
  http
} from 'msw';

import type {
  BlogPostListResponse,
  BlogPostResponse,
  Comment,
  CommentsResponse
} from './schemas';


export const getGetBlogPostsResponseMock = (): BlogPostListResponse => ({"status":"success","data":{"posts":[{"id":"post-123","title":"Getting Started with Next.js","excerpt":"Learn the basics of Next.js in this comprehensive guide covering SSR, SSG, and CSR.","author":"John Doe","publishedAt":"2024-01-15T10:30:00Z"},{"id":"post-124","title":"Advanced React Patterns","excerpt":"Explore advanced React patterns including hooks, context, and state management techniques.","author":"Jane Smith","publishedAt":"2024-01-14T09:15:00Z"},{"id":"post-125","title":"TypeScript Best Practices","excerpt":"Learn TypeScript best practices for building scalable and maintainable applications.","author":"Bob Johnson","publishedAt":"2024-01-13T14:45:00Z"}],"pagination":{"page":1,"limit":10,"total":3,"hasNext":false}}})

export const getCreateBlogPostResponseMock = (): BlogPostResponse => ({"status":"success","data":{"id":"post-123","title":"Getting Started with Next.js","content":"# Introduction\n\nNext.js is a powerful React framework that enables you to build full-stack web applications by extending the latest React features.\n\n## Key Features\n\n- **Server-Side Rendering (SSR)**: Pre-render pages on the server\n- **Static Site Generation (SSG)**: Generate static HTML at build time\n- **Client-Side Rendering (CSR)**: Render pages in the browser\n- **API Routes**: Build API endpoints within your Next.js app\n\n## Getting Started\n\nTo create a new Next.js project, run:\n\n```bash\nnpx create-next-app@latest my-app\ncd my-app\nnpm run dev\n```\n\nYour application will be available at `http://localhost:3000`.\n\n## Conclusion\n\nNext.js provides a great developer experience with many features out of the box. It's perfect for building modern web applications.\n","excerpt":"Learn the basics of Next.js in this comprehensive guide covering SSR, SSG, and CSR.","author":"John Doe","publishedAt":"2024-01-15T10:30:00Z","status":"published"}})

export const getGetBlogPostByIdResponseMock = (): BlogPostResponse => ({"status":"success","data":{"id":"post-123","title":"Getting Started with Next.js","content":"# Introduction\n\nNext.js is a powerful React framework that enables you to build full-stack web applications by extending the latest React features.\n\n## Key Features\n\n- **Server-Side Rendering (SSR)**: Pre-render pages on the server\n- **Static Site Generation (SSG)**: Generate static HTML at build time\n- **Client-Side Rendering (CSR)**: Render pages in the browser\n- **API Routes**: Build API endpoints within your Next.js app\n\n## Getting Started\n\nTo create a new Next.js project, run:\n\n```bash\nnpx create-next-app@latest my-app\ncd my-app\nnpm run dev\n```\n\nYour application will be available at `http://localhost:3000`.\n\n## Conclusion\n\nNext.js provides a great developer experience with many features out of the box. It's perfect for building modern web applications.\n","excerpt":"Learn the basics of Next.js in this comprehensive guide covering SSR, SSG, and CSR.","author":"John Doe","publishedAt":"2024-01-15T10:30:00Z","status":"published"}})

export const getUpdateBlogPostResponseMock = (): BlogPostResponse => ({"status":"success","data":{"id":"post-123","title":"Getting Started with Next.js","content":"# Introduction\n\nNext.js is a powerful React framework that enables you to build full-stack web applications by extending the latest React features.\n\n## Key Features\n\n- **Server-Side Rendering (SSR)**: Pre-render pages on the server\n- **Static Site Generation (SSG)**: Generate static HTML at build time\n- **Client-Side Rendering (CSR)**: Render pages in the browser\n- **API Routes**: Build API endpoints within your Next.js app\n\n## Getting Started\n\nTo create a new Next.js project, run:\n\n```bash\nnpx create-next-app@latest my-app\ncd my-app\nnpm run dev\n```\n\nYour application will be available at `http://localhost:3000`.\n\n## Conclusion\n\nNext.js provides a great developer experience with many features out of the box. It's perfect for building modern web applications.\n","excerpt":"Learn the basics of Next.js in this comprehensive guide covering SSR, SSG, and CSR.","author":"John Doe","publishedAt":"2024-01-15T10:30:00Z","status":"published"}})

export const getGetPostCommentsResponseMock = (): CommentsResponse => ({"status":"success","data":[{"id":"comment-456","content":"Great article! Very helpful explanation of Next.js features. I especially liked the section on SSR vs SSG.","userId":"uid_abc123xyz","createdAt":"2024-01-15T14:20:00Z","postId":"post-123"},{"id":"comment-457","content":"Thanks for sharing this! The code examples are really clear and easy to follow.","userId":"uid_def456uvw","createdAt":"2024-01-15T16:45:00Z","postId":"post-123"},{"id":"comment-458","content":"Could you write a follow-up article about Next.js deployment strategies?","userId":"uid_xyz789rst","createdAt":"2024-01-16T08:30:00Z","postId":"post-123"}]})

export const getCreateCommentResponseMock = (): Comment => ({"id":"comment-456","content":"Great article! Very helpful explanation of Next.js features. I especially liked the section on SSR vs SSG.","userId":"uid_abc123xyz","createdAt":"2024-01-15T14:20:00Z","postId":"post-123"})

export const getGetUserPostsResponseMock = (): BlogPostListResponse => ({"status":"success","data":{"posts":[{"id":"post-123","title":"Getting Started with Next.js","excerpt":"Learn the basics of Next.js in this comprehensive guide covering SSR, SSG, and CSR.","author":"John Doe","publishedAt":"2024-01-15T10:30:00Z"},{"id":"post-124","title":"Advanced React Patterns","excerpt":"Explore advanced React patterns including hooks, context, and state management techniques.","author":"Jane Smith","publishedAt":"2024-01-14T09:15:00Z"},{"id":"post-125","title":"TypeScript Best Practices","excerpt":"Learn TypeScript best practices for building scalable and maintainable applications.","author":"Bob Johnson","publishedAt":"2024-01-13T14:45:00Z"}],"pagination":{"page":1,"limit":10,"total":3,"hasNext":false}}})

export const getGetUserFavoritesResponseMock = (): BlogPostListResponse => ({"status":"success","data":{"posts":[{"id":"post-123","title":"Getting Started with Next.js","excerpt":"Learn the basics of Next.js in this comprehensive guide covering SSR, SSG, and CSR.","author":"John Doe","publishedAt":"2024-01-15T10:30:00Z"},{"id":"post-124","title":"Advanced React Patterns","excerpt":"Explore advanced React patterns including hooks, context, and state management techniques.","author":"Jane Smith","publishedAt":"2024-01-14T09:15:00Z"},{"id":"post-125","title":"TypeScript Best Practices","excerpt":"Learn TypeScript best practices for building scalable and maintainable applications.","author":"Bob Johnson","publishedAt":"2024-01-13T14:45:00Z"}],"pagination":{"page":1,"limit":10,"total":3,"hasNext":false}}})


export const getGetBlogPostsMockHandler = (overrideResponse?: BlogPostListResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BlogPostListResponse> | BlogPostListResponse)) => {
  return http.get('*/posts', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetBlogPostsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateBlogPostMockHandler = (overrideResponse?: BlogPostResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BlogPostResponse> | BlogPostResponse)) => {
  return http.post('*/posts', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateBlogPostResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetBlogPostByIdMockHandler = (overrideResponse?: BlogPostResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BlogPostResponse> | BlogPostResponse)) => {
  return http.get('*/posts/:id', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetBlogPostByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateBlogPostMockHandler = (overrideResponse?: BlogPostResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<BlogPostResponse> | BlogPostResponse)) => {
  return http.put('*/posts/:id', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUpdateBlogPostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteBlogPostMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('*/posts/:id', async (info) => {
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetPostCommentsMockHandler = (overrideResponse?: CommentsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CommentsResponse> | CommentsResponse)) => {
  return http.get('*/posts/:id/comments', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetPostCommentsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateCommentMockHandler = (overrideResponse?: Comment | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Comment> | Comment)) => {
  return http.post('*/posts/:id/comments', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateCommentResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getFavoritePostMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<null> | null)) => {
  return http.post('*/posts/:id/favorite', async (info) => {
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getUnfavoritePostMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('*/posts/:id/favorite', async (info) => {
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetUserPostsMockHandler = (overrideResponse?: BlogPostListResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BlogPostListResponse> | BlogPostListResponse)) => {
  return http.get('*/users/:uid/posts', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetUserPostsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetUserFavoritesMockHandler = (overrideResponse?: BlogPostListResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BlogPostListResponse> | BlogPostListResponse)) => {
  return http.get('*/users/:uid/favorites', async (info) => {
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetUserFavoritesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getBlogPostAPIMock = () => [
  getGetBlogPostsMockHandler(),
  getCreateBlogPostMockHandler(),
  getGetBlogPostByIdMockHandler(),
  getUpdateBlogPostMockHandler(),
  getDeleteBlogPostMockHandler(),
  getGetPostCommentsMockHandler(),
  getCreateCommentMockHandler(),
  getFavoritePostMockHandler(),
  getUnfavoritePostMockHandler(),
  getGetUserPostsMockHandler(),
  getGetUserFavoritesMockHandler()
]
